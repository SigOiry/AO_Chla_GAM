---
title: "What are the environmental factors that drive chlorophyll-a (Chl-a) concentration in the Arctic Ocean?"
author: "Simon Oiry"
format:
  html:
    css: styles.css
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r library}
#| cache: false
#| echo: false
#| warning: false

library(tidyverse)
library(lubridate)
library(brms)
library(purrr)
library(dplyr)
library(Utilities.Package)
```

```{r Open Chlorophyll}
#| cache: false
#| echo: false
#| warning: false

# Read in
df_chla <- readxl::read_xlsx("Data/Chla_and_Environment.xlsx") %>% 
  mutate(Date = as.Date(gsub("'","",Date)),
         `CHL (mg m-3)` = as.numeric(`CHL (mg m-3)`), 
         Region = as.factor(Region)) %>% 
  dplyr::filter(!is.nan(`CHL (mg m-3)`)) %>% 
  rename(Chla = "CHL (mg m-3)",
         SST = "SST (degrees C)",
         IceCover = "ICE (cover)",
         WindSpeed = "WINDSPEED (m s-1)") %>% 
  pivot_longer(-c(Date,Region), names_to = "Metric", values_to = "Value") %>% 
  group_by(Metric, Region) %>% 
  mutate(Value = scales::squish(Value, c(stats::quantile(Value, probs = 0.01, na.rm = T),stats::quantile(Value, probs = 0.99, na.rm = T))))%>% 
  ungroup() %>% 
  pivot_wider(values_from = Value, names_from = Metric)


df_chla <- read.csv("Data/data_AO_for_GAMs_env_factors_chl_geomean.csv") %>% 
  mutate(Region = as.factor(Region)) %>% 
  dplyr::filter(!is.nan(Chl)) %>% 
  rename(IceCover = "Ice",
         WindSpeed = "Wind") %>% 
  pivot_longer(-c(Date,Region), names_to = "Metric", values_to = "Value") %>% 
  group_by(Metric, Region) %>% 
  mutate(Value = scales::squish(Value, c(stats::quantile(Value, probs = 0.01, na.rm = T),stats::quantile(Value, probs = 0.99, na.rm = T))))%>% 
  ungroup() %>% 
  pivot_wider(values_from = Value, names_from = Metric)

df_chla_STD <- read.csv("Data/data_AO_for_GAMs_env_factors_chl_geomean.csv") %>% 
  mutate(Region = as.factor(Region)) %>% 
  dplyr::filter(!is.nan(Chl)) %>% 
  rename(IceCover = "Ice",
         WindSpeed = "Wind") %>% 
  pivot_longer(-c(Date,Region), names_to = "Metric", values_to = "Value") %>% 
  group_by(Metric, Region) %>% 
  mutate(Value = scales::squish(Value, c(stats::quantile(Value, probs = 0.01, na.rm = T),stats::quantile(Value, probs = 0.99, na.rm = T))))%>% 
  ungroup() %>% 
  pivot_wider(values_from = Value, names_from = Metric) %>%
  group_by(Region) %>% 
  mutate(across(c(SST, IceCover, WindSpeed),
                ~ ( .x - mean(.x, na.rm = TRUE) ) / sd(.x, na.rm = TRUE )))

```

```{r colorscale}
#| cache: false
#| echo: false
#| warning: false


colpal <- c("Baffin Bay" = "#326CBE",
            "Barents Sea" = "#C2E5B4",
            "Basin" = "#1F408D",
            "Beaufort Sea"= "#808064",
            "Canadian Archipelago"= "#199A98",
            "Chukchi Sea"= "#538CB2",
            "East Siberian Sea"= "#38B423",
            "Kara Sea" = "#98BF39",
            "Laptev Sea" = "#A7C6EB",
            "Nordic Sea" = "#4D3374")

```

::: {style="text-align: center; margin-top: 20px;"}
<button onclick="window.open(&#39;https://github.com/SigOiry/AO_Chla_GAM&#39;, &#39;_blank&#39;);" style="padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;">

Visit the Github repository
</button>
:::

# Study sites

```{r leaflet map}
#| label: fig-map_sites
#| fig-cap: Map of the AO regions investigated in this study
#| echo: false
#| error: false
#| message: false
#| warning: false
#| out-width: "95%"


knitr::include_graphics("img/RegionsAO.jpg")
```

# Data investigation

```{r overall raw plot}
#| label: fig-overall_raw
#| fig-cap: Time Serie of Chla and environmental varibles
#| echo: false
#| error: false
#| message: false
#| warning: false
#| fig-height: 5


library(plotly)

# colscale <- c("Adriatic" = "goldenrod","Lyon" = "darkgreen","Cyprus" = "darkred")
p <- df_chla_STD%>%
  pivot_longer(-c(Date,Region), values_to = "Value", names_to = "Metric") %>% 
  # dplyr::filter(Date >= date_min,
                # Date <= date_max) %>%
  ggplot(aes(x = Date, y = Value, color = Region))+
  geom_point(size = 1)+
  geom_line(linewidth = 0.5)+
  scale_color_manual(values = colpal)+
  # geom_smooth(method = "gam")+
  facet_wrap(~Metric,scales = "free", ncol = 2)+
  theme_bw()+
  theme(legend.position = "top")


  ggplotly(p)

```

# Colinearity of variable

```{r scatterplot}
#| label: fig-pairwise_plot1
#| fig-cap: Pairwise scatter plot of each variable
#| echo: false
#| error: false
#| message: false
#| warning: false
#| out-width: "95%"

library(GGally)
df_chla %>% 
  dplyr::select(-c(Date,Region)) %>% 
 ggpairs() +
  theme_minimal()+
  theme(axis.text = element_blank())
```

# Model Building

We fitted a Bayesian Generalised Additive Model (GAM) in brms (Bürkner 2017, 2018, 2021) to explain the geometric-mean chlorophyll-a concentration (*GeoMean_Chla*) across 10 sites. To improve model convergence and account for heavy-tailed residuals, chlorophyll-a values were first log-transformed and then standardized (z-scored) prior to modelling. The standardized log-transformed Chla was modelled using a Student's t-distribution, which allows for heavier tails and increased robustness to outliers compared to the Gaussian.

Three key environmental drivers—sea-surface temperature (*SST*), ice cover (*IceCover*), and wind speed (*WindSpeed*)—were included as thin-plate regression splines with region-specific smooths to capture potentially different non-linear responses across regions. Weakly regularizing priors were placed on the intercept (Student-t(3, 0, 2.5)), on each spline’s smoothing standard deviation (half-Student-t(3, 0, 2.5)), and on the residual standard deviation (half-Student-t(3, 0, 2.5)).

Posterior inference was performed using the No-U-Turn Sampler (NUTS), a Hamiltonian Monte Carlo method implemented in brms, with 4 chains of 5,000 iterations each (500 warm-up, 4,500 post-warm-up). Convergence diagnostics indicated satisfactory sampling, with all Gelman–Rubin statistics (R̂) ≤ 1.01 and all bulk and tail effective sample sizes > 1,000, confirming a thorough exploration of the joint posterior.

\begin{aligned}
z\bigl(\log(\mathrm{Chla}_i)\bigr) \;\bigl|\; \mu_i, \sigma, \nu
&\sim t_\nu(\mu_i,\,\sigma), \\[6pt]

E\bigl[z(\log(\mathrm{Chla}_i))\bigr] &= \mu_i, \\[6pt]

\mu_i &= \eta_i, \\[4pt]

\eta_i 
&= \alpha
   + f_1\bigl(\mathrm{SST}_i \mid \mathrm{Region}_i\bigr)
   + f_2\bigl(\mathrm{IceCover}_i \mid \mathrm{Region}_i\bigr)
   + f_3\bigl(\mathrm{WindSpeed}_i \mid \mathrm{Region}_i\bigr),
   \\[8pt]

f_j(x \mid r)
&= \sum_{k=1}^{K_j} \beta_{jkr}\,B_{jk}(x),
\quad j = 1,2,3,\; r = 1,\dots,R, \\[10pt]

\alpha &\sim t_{3}(0,\,2.5), \\[2pt]
\beta_{jkr} &\sim \mathcal{N}(0,\,\sigma_j^{2}), \\[2pt]
\sigma_j &\sim t^{+}_{3}(0,\,2.5),
\quad j = 1,2,3, \\[2pt]
\sigma &\sim t^{+}_{3}(0,\,2.5), \\[2pt]
\nu &\sim \mathrm{Gamma}(2,\,0.1).
\end{aligned}


<!-- ```{r Interaction by boxes} -->

<!-- # Fit a GAM where each smooth is allowed to vary by Box -->

<!-- fit <- brm( -->

<!--   formula = GeoMean_Chla ~  -->

<!--     s(SST, by = Box) + s(SSS, by = Box) + s(PO4, by = Box) + -->

<!--     s(NO3, by = Box) + s(NH4, by = Box) + s(MLD, by = Box) + -->

<!--     s(HF, by = Box) + (1 | Box), -->

<!--   data = df_wide, -->

<!--   family = Gamma(link = "log"), -->

<!--   chains = 4, cores = 15, -->

<!--   iter = 1000, -->

<!--   warmup = 100, -->

<!--   file = "Data/Model/Chla_GAM_all_1000" -->

<!-- ) -->

<!-- summary(fit) -->

<!-- smooths <- conditional_smooths(fit) -->

<!-- lapply(smooths, names) -->

<!-- all_smooths <- map_dfr( -->

<!--   names(smooths), -->

<!--   function(name) { -->

<!--     df <- smooths[[name]] -->

<!--     x_var <- setdiff(names(df), c("estimate__", "se__", "lower__", "upper__", "cond__")) -->

<!--     df <- df %>% rename(x = all_of(x_var)) -->

<!--     df$variable <- name -->

<!--     df -->

<!--   }, -->

<!--   .id = "id" -->

<!-- ) -->

<!-- smooths_by_var <- split(all_smooths, all_smooths$variable) -->

<!-- # Create a plot for each variable -->

<!-- plots <- lapply(names(smooths_by_var), function(varname) { -->

<!--   df <- smooths_by_var[[varname]] -->

<!--   ggplot(df, aes(x = x1, y = estimate__)) + -->

<!--     geom_line() + -->

<!--     geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) + -->

<!--     facet_wrap(~ cond__, scales = "free_x") + -->

<!--     labs( -->

<!--       title = paste("Effect of", varname, "on Chla"), -->

<!--       x = varname, -->

<!--       y = "Estimated Effect on Chla" -->

<!--     )+ -->

<!--     theme_Bede() -->

<!-- }) -->

<!-- for (p in plots) print(p) -->

<!-- ``` -->

<!-- ```{r Interaction by boxes STD} -->

<!-- df_wide_std <- df_wide %>% -->

<!--   mutate(across(c(SST, SSS, PO4, NO3, NH4, MLD, HF),  -->

<!--                 ~ scale(.)[, 1],  -->

<!--                 .names = "{.col}_z")) -->

<!-- fit <- brm( -->

<!--   formula = GeoMean_Chla ~  -->

<!--     s(SST_z, by = Box) + s(SSS_z, by = Box) + s(PO4_z, by = Box) + -->

<!--     s(NO3_z, by = Box) + s(NH4_z, by = Box) + s(MLD_z, by = Box) + -->

<!--     s(HF_z, by = Box) + (1 | Box), -->

<!--   data = df_wide_std, -->

<!--   family = Gamma(link = "log"), -->

<!--   chains = 4, cores = 15, -->

<!--   iter = 10000, -->

<!--   warmup = 1000, -->

<!--   file = "Data/Model/Chla_GAM_all_STD_10000" -->

<!-- ) -->

<!-- summary(fit) -->

<!-- plot(fit) -->

<!-- # Extract conditional smooths -->

<!-- smooths <- conditional_smooths(fit) -->

<!-- # Retrieve scaling parameters for inverse transform -->

<!-- scaling_info <- df_wide %>% -->

<!--   summarize(across(c(SST, SSS, PO4, NO3, NH4, MLD, HF), -->

<!--                    list(mean = mean, sd = sd), na.rm = TRUE)) -->

<!-- #  Convert smooths back to native x-axis scale -->

<!-- all_smooths <- map_dfr( -->

<!--   names(smooths), -->

<!--   function(name) { -->

<!--     df <- smooths[[name]] -->

<!--     x_var <- setdiff(names(df), c("estimate__", "se__", "lower__", "upper__", "cond__")) -->

<!--     df <- df %>% rename(x = all_of(x_var)) -->

<!--     df$variable <- name -->

<!--     df -->

<!--   }, -->

<!--   .id = "id" -->

<!-- ) -->

<!-- all_smooths_native <- all_smooths %>% -->

<!--   mutate(raw_x = dplyr::case_when( -->

<!--     variable == "mu: s(SST_z,by=Box)" ~ x1 * as.numeric(scaling_info$SST_sd) + as.numeric(scaling_info$SST_mean), -->

<!--     variable == "mu:s(SSS_z,by=Box)" ~ x1 * as.numeric(scaling_info$SSS_sd) + as.numeric(scaling_info$SSS_mean), -->

<!--     variable == "mu:s(PO4_z,by=Box)" ~ x1 * as.numeric(scaling_info$PO4_sd) + as.numeric(scaling_info$PO4_mean), -->

<!--     variable == "mu:s(NO3_z,by=Box)" ~ x1 * as.numeric(scaling_info$NO3_sd) + as.numeric(scaling_info$NO3_mean), -->

<!--     variable == "mu:s(NH4_z,by=Box)" ~ x1 * as.numeric(scaling_info$NH4_sd) + as.numeric(scaling_info$NH4_mean), -->

<!--     variable == "mu:s(MLD_z,by=Box)" ~ x1 * as.numeric(scaling_info$MLD_sd) + as.numeric(scaling_info$MLD_mean), -->

<!--     variable == "mu:s(HF_z,by=Box)"  ~ x1 * as.numeric(scaling_info$HF_sd)  + as.numeric(scaling_info$HF_mean), -->

<!--     TRUE ~ NA_real_ -->

<!--   )) -->

<!-- # Split and plot -->

<!-- smooths_by_var_native <- split(all_smooths_native, all_smooths_native$variable) %>%  -->

<!--   as_tibble() -->

<!-- plots <- lapply(names(smooths_by_var_native), function(varname) { -->

<!--   df <- smooths_by_var_native[[varname]] -->

<!--   ggplot(df, aes(x = raw_x, y = estimate__)) + -->

<!--     geom_line() + -->

<!--     geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) + -->

<!--     facet_wrap(~ cond__, scales = "free_x") + -->

<!--     labs( -->

<!--       title = paste("Effect of", varname, "on Chla"), -->

<!--       x = varname, -->

<!--       y = "Estimated Effect on Chla" -->

<!--     ) + -->

<!--     theme_minimal() -->

<!-- }) -->

<!-- # Display all plots -->

<!-- for (p in plots) print(p) -->

<!-- ``` -->

<!-- ```{r Pred all} -->

<!-- preds_all <- fitted( -->

<!--   fit, -->

<!--   newdata    = df_wide, -->

<!--   re_formula = NULL,    # include Box intercept -->

<!--   probs      = c(0.025, 0.975) -->

<!-- ) -->

<!-- plotdat_all <- bind_cols(df_wide, as_tibble(preds_all)) -->

<!-- # 3c. Plot: obs ± SE, plus GAM fit ±95% ribbon, faceted by Box -->

<!-- ggplot() + -->

<!--   geom_errorbar( -->

<!--     data = df_wide, -->

<!--     aes(x = Date, -->

<!--         ymin = GeoMean_Chla - SE_Chla, -->

<!--         ymax = GeoMean_Chla + SE_Chla), -->

<!--     width = 0.1, alpha = 0.4 -->

<!--   ) + -->

<!--   geom_point( -->

<!--     data = df_wide, -->

<!--     aes(x = Date, y = GeoMean_Chla), -->

<!--     size = 1, alpha = 0.6 -->

<!--   ) + -->

<!--   geom_line( -->

<!--     data = plotdat_all, -->

<!--     aes(x = Date, y = Estimate), -->

<!--     size = 1 -->

<!--   ) + -->

<!--   geom_ribbon( -->

<!--     data = plotdat_all, -->

<!--     aes(x = Date, ymin = Q2.5, ymax = Q97.5), -->

<!--     alpha = 0.2 -->

<!--   ) + -->

<!--   facet_wrap(~ Box, scale = "free") + -->

<!--   labs( -->

<!--     x = "Date", -->

<!--     y = "Chlorophyll-a (GeoMean)", -->

<!--     title = "Bayesian GAM: Chla ~ Date by Box", -->

<!--     subtitle = "Points ± SE = obs; line + ribbon = posterior mean ±95% CI" -->

<!--   ) + -->

<!--   theme_minimal() -->

<!-- ``` -->

<!-- ```{r model Adriatic} -->

<!-- library(tidybayes) -->

<!-- df_wide_adriatic <- df_wide %>%  -->

<!--   dplyr::filter(Box == "Adriatic") -->

<!-- df_wide_adriatic_STD <- df_wide_adriatic %>%  -->

<!--   mutate(across(c(SST, SSS, PO4, NO3, NH4, MLD, HF), -->

<!--                 ~ ( .x - mean(.x, na.rm = TRUE) ) / sd(.x, na.rm = TRUE ))) -->

<!-- fit_adriatic <- brm( -->

<!--   formula = GeoMean_Chla ~  -->

<!--     s(SST) + s(SSS) + s(PO4) + -->

<!--     s(NO3) + s(NH4) + s(MLD) + -->

<!--     s(HF), -->

<!--   data = df_wide_adriatic_STD, -->

<!--   family = Gamma(link = "log"), -->

<!--   chains = 4, cores = 15, -->

<!--   iter = 1000, -->

<!--   warmup = 100, -->

<!--   control = list(adapt_delta = 0.97,  max_treedepth = 15), -->

<!--   file = "Data/Model/Chla_GAM_all_1000_adriatic_log_adapt_delta_97_tree_15_STD" -->

<!-- ) -->

<!-- # plot(fit_adriatic) -->

<!-- summary(fit_adriatic) -->

<!-- plot(conditional_smooths(fit_adriatic), ask = FALSE) -->

<!-- ``` -->

<!-- ```{r model Cyprus} -->

<!-- df_wide_Cyprus <- df_wide %>%  -->

<!--   dplyr::filter(Box == "Cyprus") -->

<!-- df_wide_Cyprus_STD <- df_wide_Cyprus %>%  -->

<!--   mutate(across(c(SST, SSS, PO4, NO3, NH4, MLD, HF), -->

<!--                 ~ ( .x - mean(.x, na.rm = TRUE) ) / sd(.x, na.rm = TRUE ))) -->

<!-- fit_Cyprus <- brm( -->

<!--   formula = GeoMean_Chla ~  -->

<!--     s(SST) + s(SSS) + s(PO4) + -->

<!--     s(NO3) + s(NH4) + s(MLD) + -->

<!--     s(HF), -->

<!--   data = df_wide_Cyprus_STD, -->

<!--   family = Gamma(link = "log"), -->

<!--   chains = 4, cores = 15, -->

<!--   iter = 1000, -->

<!--   warmup = 100, -->

<!--   control = list(adapt_delta = 0.97,  max_treedepth = 15), -->

<!--   file = "Data/Model/Chla_GAM_all_1000_Cyprus_log_adapt_delta_97_tree_15_STD" -->

<!-- ) -->

<!-- # plot(fit_adriatic) -->

<!-- summary(fit_Cyprus) -->

<!-- plot(conditional_smooths(fit_adriatic), ask = FALSE) -->

<!-- ``` -->

<!-- ```{r model Lyon} -->

<!-- df_wide_Lyon <- df_wide %>%  -->

<!--   dplyr::filter(Box == "Lyon") -->

<!-- df_wide_Lyon_STD <- df_wide_Lyon %>%  -->

<!--   mutate(across(c(SST, SSS, PO4, NO3, NH4, MLD, HF), -->

<!--                 ~ ( .x - mean(.x, na.rm = TRUE) ) / sd(.x, na.rm = TRUE ))) -->

<!-- pairs(df_wide_Lyon_STD %>% dplyr::select(-Box)) -->

<!-- fit_Lyon <- brm( -->

<!--   formula = GeoMean_Chla ~  -->

<!--     s(SST) + s(SSS) + s(PO4) + -->

<!--     s(NO3) + s(NH4) + s(MLD) + -->

<!--     s(HF), -->

<!--   data = df_wide_Lyon_STD, -->

<!--   family = Gamma(link = "log"), -->

<!--   chains = 4, cores = 15, -->

<!--   iter = 10000, -->

<!--   warmup = 1000, -->

<!--   control = list(adapt_delta = 0.97,  max_treedepth = 15), -->

<!--   file = "Data/Model/Chla_GAM_all_10000_Lyon_log_adapt_delta_97_tree_15_STD" -->

<!-- ) -->

<!-- # plot(fit_adriatic) -->

<!-- summary(fit_Lyon) -->

<!-- plot(conditional_smooths(fit_adriatic), ask = FALSE) -->

<!-- ``` -->

<!-- ```{r model Lyon Cleaned} -->

<!-- df_wide_Lyon <- df_wide %>%  -->

<!--   dplyr::filter(Box == "Lyon") %>%  -->

<!--   mutate( -->

<!--     DIN  = NO3 + NH4,                     -->

<!--     N_P  = DIN / PO4,                     -->

<!--     # log_N_P = log1p(N_P), -->

<!--     sum_Nutri = NO3 + NH4 + PO4 -->

<!--   ) %>%  -->

<!--   dplyr::select(-c(PO4,NO3,NH4,DIN)) -->

<!-- df_wide_Lyon_STD <- df_wide_Lyon %>%  -->

<!--   mutate(across(c(SST, SSS, N_P, sum_Nutri, MLD, HF), -->

<!--                 ~ ( .x - mean(.x, na.rm = TRUE) ) / sd(.x, na.rm = TRUE ))) -->

<!-- pairs(df_wide_Lyon_STD %>% dplyr::select(-Box)) -->

<!-- fit_Lyon <- brm( -->

<!--   formula = GeoMean_Chla ~  -->

<!--     s(SST) + s(SSS) + s(N_P) + -->

<!--     s(sum_Nutri) + s(MLD) + -->

<!--     s(HF), -->

<!--   data = df_wide_Lyon_STD, -->

<!--   family = Gamma(link = "log"), -->

<!--   chains = 4, cores = 15, -->

<!--   iter = 10000, -->

<!--   warmup = 1000, -->

<!--   control = list(adapt_delta = 0.97,  max_treedepth = 15), -->

<!--   file = "Data/Model/Chla_GAM_all_10000_Lyon_log_adapt_delta_97_tree_15_Cleaned_STD" -->

<!-- ) -->

<!-- # plot(fit_adriatic) -->

<!-- summary(fit_Lyon) -->

<!-- ce_sst <- conditional_effects( -->

<!--   fit_Lyon, -->

<!--   effects = "SST",      # any main effect; interactions like "SST:MLD" -->

<!--   prob    = 0.80        # 80 % ribbon (default is 95 %) -->

<!--   # re_formula = NA     # <- exclude random effects; set to NULL to include -->

<!-- ) -->

<!-- # conditional_effects(fit_Lyon, effects = "SST:MLD", surface = TRUE) -->

<!-- # plot(ce_sst, points = TRUE, rug = TRUE, ask = FALSE) -->

<!-- # plot(conditional_smooths(fit_adriatic), ask = FALSE) -->

<!-- ``` -->

<!-- ```{r model Adriatic Cleaned} -->

<!-- df_wide_Adriatic <- df_wide %>%  -->

<!--   dplyr::filter(Box == "Adriatic") %>%  -->

<!--   mutate( -->

<!--     DIN  = NO3 + NH4,                     -->

<!--     N_P  = DIN / PO4,                     -->

<!--     # log_N_P = log1p(N_P), -->

<!--     sum_Nutri = NO3 + NH4 + PO4 -->

<!--   ) %>%  -->

<!--   dplyr::select(-c(PO4,NO3,NH4,DIN)) -->

<!-- df_wide_Adriatic_STD <- df_wide_Adriatic %>%  -->

<!--   mutate(across(c(SST, SSS, N_P, sum_Nutri, MLD, HF), -->

<!--                 ~ ( .x - mean(.x, na.rm = TRUE) ) / sd(.x, na.rm = TRUE ))) -->

<!-- pairs(df_wide_Adriatic_STD %>% dplyr::select(-Box)) -->

<!-- fit_Adriatic <- brm( -->

<!--   formula = GeoMean_Chla ~  -->

<!--     s(SST) + s(SSS) + s(N_P) + -->

<!--     s(sum_Nutri) + s(MLD) + -->

<!--     s(HF), -->

<!--   data = df_wide_Adriatic_STD, -->

<!--   family = Gamma(link = "log"), -->

<!--   chains = 4, cores = 15, -->

<!--   iter = 10000, -->

<!--   warmup = 1000, -->

<!--   control = list(adapt_delta = 0.97,  max_treedepth = 15), -->

<!--   file = "Data/Model/Chla_GAM_all_10000_Adriatic_log_adapt_delta_97_tree_15_Cleaned_STD" -->

<!-- ) -->

<!-- # plot(fit_adriatic) -->

<!-- summary(fit_Adriatic) -->

<!-- # plot(conditional_smooths(fit_adriatic), ask = FALSE) -->

<!-- ``` -->

<!-- ```{r model Cyprus Cleaned} -->

<!-- df_wide_Cyprus <- df_wide %>%  -->

<!--   dplyr::filter(Box == "Cyprus") %>%  -->

<!--   mutate( -->

<!--     DIN  = NO3 + NH4,                     -->

<!--     N_P  = DIN / PO4,                     -->

<!--     log_N_P = log1p(N_P), -->

<!--     sum_Nutri = NO3 + NH4 + PO4 -->

<!--   ) %>%  -->

<!--   dplyr::select(-c(PO4,NO3,NH4,log_N_P,DIN)) -->

<!-- df_wide_Cyprus_STD <- df_wide_Cyprus %>%  -->

<!--   mutate(across(c(SST, SSS, N_P, sum_Nutri, MLD, HF), -->

<!--                 ~ ( .x - mean(.x, na.rm = TRUE) ) / sd(.x, na.rm = TRUE ))) -->

<!-- pairs(df_wide_Cyprus_STD %>% dplyr::select(-Box)) -->

<!-- fit_Cyprus <- brm( -->

<!--   formula = GeoMean_Chla ~  -->

<!--     s(SST) + s(SSS) + s(N_P) + -->

<!--     s(sum_Nutri) + s(MLD) + -->

<!--     s(HF), -->

<!--   data = df_wide_Cyprus_STD, -->

<!--   family = Gamma(link = "log"), -->

<!--   chains = 4, cores = 15, -->

<!--   iter = 10000, -->

<!--   warmup = 1000, -->

<!--   control = list(adapt_delta = 0.97,  max_treedepth = 15), -->

<!--   file = "Data/Model/Chla_GAM_all_10000_Cyprus_log_adapt_delta_97_tree_15_Cleaned_STD" -->

<!-- ) -->

<!-- # plot(fit_Cyprus) -->

<!-- summary(fit_Cyprus) -->

<!-- plot(conditional_smooths(fit_Cyprus), ask = FALSE) -->

<!-- ``` -->
